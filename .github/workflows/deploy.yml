name: Deploy WSA Portal

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # Vercel deployment settings
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check
        continue-on-error: false

      - name: Linting
        run: npm run lint
        continue-on-error: false

      - name: Build application
        run: npm run build
        env:
          # Build-time environment variables
          NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
          NEXT_PUBLIC_AAD_TENANT_ID: ${{ secrets.NEXT_PUBLIC_AAD_TENANT_ID }}
          NEXT_PUBLIC_AAD_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_AAD_CLIENT_ID }}

      - name: Run unit tests (if any)
        run: npm test --if-present

  # Security Scan Job
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: npm audit --audit-level=high --production

  # Deployment Job (Production)
  deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          # Production environment variables
          BASE_URL: ${{ secrets.BASE_URL }}
          NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
          NEXT_PUBLIC_AAD_TENANT_ID: ${{ secrets.NEXT_PUBLIC_AAD_TENANT_ID }}
          NEXT_PUBLIC_AAD_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_AAD_CLIENT_ID }}
          AAD_TENANT_ID: ${{ secrets.AAD_TENANT_ID }}
          AAD_CLIENT_ID: ${{ secrets.AAD_CLIENT_ID }}
          AAD_CLIENT_SECRET: ${{ secrets.AAD_CLIENT_SECRET }}
          SP_SITE_URL: ${{ secrets.SP_SITE_URL }}
          SP_SITE_ID: ${{ secrets.SP_SITE_ID }}
          SP_NEWS_LIST_ID: ${{ secrets.SP_NEWS_LIST_ID }}
          SP_EVENTS_LIST_ID: ${{ secrets.SP_EVENTS_LIST_ID }}
          SP_ASSETS_DRIVE_ID: ${{ secrets.SP_ASSETS_DRIVE_ID }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        id: deploy

      - name: Update deployment status
        if: success()
        run: |
          echo "Deployment successful! üéâ"
          echo "Production URL: https://portal.worksourcealliance.ca"

  # Deployment Job (Preview)
  deploy-preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    environment: preview
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          # Preview environment variables
          BASE_URL: ${{ secrets.PREVIEW_BASE_URL }}
          NEXT_PUBLIC_BASE_URL: ${{ secrets.PREVIEW_BASE_URL }}
          NEXT_PUBLIC_AAD_TENANT_ID: ${{ secrets.NEXT_PUBLIC_AAD_TENANT_ID }}
          NEXT_PUBLIC_AAD_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_AAD_CLIENT_ID }}
          AAD_TENANT_ID: ${{ secrets.AAD_TENANT_ID }}
          AAD_CLIENT_ID: ${{ secrets.AAD_CLIENT_ID }}
          AAD_CLIENT_SECRET: ${{ secrets.AAD_CLIENT_SECRET }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}

      - name: Deploy Project Artifacts to Vercel (Preview)
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
        id: deploy-preview

      - name: Comment on PR
        uses: actions/github-script@v7
        if: success()
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚úÖ Preview deployment successful!\n\nüîó Preview URL: Check the Vercel dashboard for the preview URL\n\nüß™ Test the authentication flow on the preview environment.'
            })

  # End-to-End Testing (Production)
  e2e-tests:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy-production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ secrets.BASE_URL }}
          
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Notification Job
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, e2e-tests]
    if: always()
    
    steps:
      - name: Notify deployment success
        if: needs.deploy-production.result == 'success'
        run: |
          echo "üéâ WSA Portal deployed successfully!"
          echo "Production URL: https://portal.worksourcealliance.ca"
          echo "All systems operational ‚úÖ"
          
      - name: Notify deployment failure
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs for details."
          exit 1
